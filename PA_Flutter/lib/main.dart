import 'package:flutter/material.dart';
import 'package:hive_flutter/hive_flutter.dart'; // Import Hive Flutter for initialization
// Adjust this path to where your chat_models.dart (with ChatMessage, MessageType) is located
import 'package:projectastra/models/chat_models.dart';
// Your existing AppShell import
import 'firebase_options.dart'; // Generated by flutterfire configure
import 'package:firebase_core/firebase_core.dart';
import 'services/auth_service.dart'; // Your AuthService import
import 'widgets/auth/auth_gate.dart'; // Import AuthGate for authentication handling

// Define the box name as a constant for easy reuse
const String chatMessagesBoxName = 'chatMessagesBox';

Future<void> main() async {
  // 1. Make main asynchronous
  // 2. Ensure Flutter bindings are initialized before Hive
  WidgetsFlutterBinding.ensureInitialized();
  // 3. Initialize Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  final AuthService authService = AuthService();

  // 4. Initialize Hive for Flutter (handles path for mobile/desktop/web)
  //    For mobile, it typically uses getApplicationDocumentsDirectory internally.
  await Hive.initFlutter();

  // 5. Register your Hive Adapters (generated from chat_models.dart)
  //    Make sure the adapter names (MessageTypeAdapter, ChatMessageAdapter)
  //    match exactly what was generated in your chat_models.g.dart file.
  if (!Hive.isAdapterRegistered(MessageTypeAdapter().typeId)) {
    // Check if adapter is already registered
    Hive.registerAdapter(MessageTypeAdapter());
  }
  if (!Hive.isAdapterRegistered(ChatMessageAdapter().typeId)) {
    // Check if adapter is already registered
    Hive.registerAdapter(ChatMessageAdapter());
  }

  // 6. Open your Hive box(es)
  //    This makes the box available for use throughout your app.
  await Hive.openBox<ChatMessage>(chatMessagesBoxName);

  // 7. Run your application
  runApp(MyApp(authService: authService));
}

import 'package:projectastra/theme/app_theme.dart';

class MyApp extends StatelessWidget {
  final AuthService authService;

  const MyApp({super.key, required this.authService});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Astra AI',
      theme: AppTheme.darkTheme, // Using the new dark theme
      darkTheme: AppTheme.darkTheme, // Explicitly set dark theme
      themeMode: ThemeMode.dark, // Enforce dark mode for now
      home: AuthGate(authService: authService),
      debugShowCheckedModeBanner: false,
    );
  }
}
